RESET:
STA @511 # Limpando key 0
STA @510 # Limpando key 1
STA @509 # Limpando reset_key
STA @0 # Limpando endereço de unidade
STA @1 # Limpando endereço de dezena
STA @2 # Limpando endereço de centena
STA @3 # Limpando endereço de milhar
STA @4 # Limpando endereço de dezena de milhar
STA @5 # Limpando endereço de centena de milhar
STA @288 # Limpando endereço do HEX0
STA @289 # Limpando endereço do HEX1
STA @290 # Limpando endereço do HEX2
STA @291 # Limpando endereço do HEX3
STA @292 # Limpando endereço do HEX4
STA @293 # Limpando endereço do HEX5
LDI $9 # Carregando 9 no acumulador
STA @59 # Carregando 9 na posição 59
LDI $10 # Carregando 10 no acumulador
STA @60 # Carergando 10 na posição 60
LDI $1 # Carregando 1 no acumulador
STA @51 # Carregando 1 na posição 51
NOP

define_limites:
LDI $9
STA @10 # Limite das unidades
STA @11 # Limite das dezenas
STA @12 # Limite das centenas
STA @13 # Limite dos milhares
STA @14 # Limite das dezenas de milhares
STA @15 # Limite das centenas de milhares

le_key:
LDA @352 # Carrega o acumulador com o key 0
CEQ @51 # Compara o valor do acumulador com o valor 1
JEQ %incrementa_unidade # Se for igual, vai para o label incrementa
NOP
JMP %le_key # Se não for igual, volta para o label le_key


incrementa_unidade:
NOP
STA @511 # Limpando key 0
LDA @0 # Carrega o acumulador com o endereço de unidade
CEQ @59 # Compara o valor do acumulador com o valor 9
JEQ %incrementa_dezena # Se for igual, vai para o label incrementa_dezena
SOMA @51 # Soma 1 no acumulador
STA @0 # Armazena o valor do acumulador no endereço de unidade
JMP %atualiza_displays # Se não for igual, vai para o label atualiza_unidade

incrementa_dezena:
NOP
LDI $0
STA @0 # Limpando endereço de unidade
STA @511 # Limpando Key 0
LDA @1 # Carregar o acumulador com o endereço da dezena
CEQ @59 # Compara o valor do acumulador (dezena) com o valor 9
JEQ %incrementa_centena # Se for igual a 9, vai para o incrementa_centena
SOMA @51 # Soma 1 no acumulador
STA @1 # Armazena o valor do acumulador no endereço das dezenas
JMP %atualiza_displays # Se não for igual, volta para o label atualiza_displays


incrementa_centena:
NOP
LDI $0
STA @1 # Limpando endereço de dezena
STA @511 # Limpando Key 0
LDA @2 # Carregar o acumulador com o endereço da centena
CEQ @59 # Compara o valor do acumulador (centena) com o valor 9
JEQ %incrementa_milhar # Se for igual a 9, vai para o incrementa_milhar
SOMA @51 # Soma 1 no acumulador
STA @2 # Armazena o valor do acumulador no endereço das centenas
JMP %atualiza_displays # Se não for igual, volta para o label atualiza_displays



incrementa_milhar:
NOP
LDI $0
STA @2 # Limpando endereço de centena
STA @511 # Limpando Key 0
LDA @3 # Carregar o acumulador com o endereço da milhares
CEQ @59 # Compara o valor do acumulador (dezena) com o valor 9
JEQ %incrementa_dezena_de_milhar # Se for igual a 9, vai para o incrementa_dezena_de_milhar
SOMA @51 # Soma 1 no acumulador
STA @3 # Armazena o valor do acumulador no endereço das milhares
JMP %atualiza_displays # Se não for igual, volta para o label atualiza_unidade


incrementa_dezena_de_milhar:
NOP
LDI $0
STA @3 # Limpando endereço de milhar (RAM 3)
STA @511 # Limpando Key 0
LDA @4 # Carregar o acumulador com o endereço da dezena de milhar
CEQ @59 # Compara o valor do acumulador (dezena) com o valor 9
JEQ %incrementa_centena_milhar # Se for igual a 9, vai para o incrementa_centena_milhar
SOMA @51 # Soma 1 no acumulador
STA @4 # Armazena o valor do acumulador no endereço das milhares
JMP %atualiza_displays # Se não for igual, volta para o label atualiza_displays


incrementa_centena_milhar:
NOP
LDI $0
STA @4 # Limpando endereço de dezena de milhar
STA @511 # Limpando Key 0
LDA @5 # Carregar o acumulador com o endereço da centena
CEQ @59 # Compara o valor do acumulador (centena) com o valor 9
JEQ %atualiza_displays # Se for igual a 9, vai para o atualiza_displays
SOMA @51 # Soma 1 no acumulador
STA @5 # Armazena o valor do acumulador no endereço das centenas
JMP %atualiza_displays # Se não for igual, volta para o label atualiza_displays


atualiza_displays:
NOP
LDA @0 # Carrega o acumulador com o endereço de unidade
STA @288 # Armazena o valor do acumulador no endereço do HEX0
LDA @1 # Carrega o acumulador com o endereço de dezena
STA @289 # Armazena o valor do acumulador no endereço do HEX1
LDA @2 # Carrega o acumulador com o endereço de centena
STA @290 # Armazena o valor do acumulador no endereço do HEX2
LDA @3 # Carrega o acumulador com o endereço de milhar
STA @291 # Armazena o valor do acumulador no endereço do HEX3
LDA @4 # Carrega o acumulador com o endereço de dezena de milhar
STA @292 # Armazena o valor do acumulador no endereço do HEX4
LDA @5 # Carrega o acumulador com o endereço de centena de milhar
STA @293 # Armazena o valor do acumulador no endereço do HEX5
NOP


verifica_centena_de_milhar:
LDA @5 # Carrega o acumulador com o endereço de centena de milhar
CEQ @15 # Compara o valor do acumulador com o valor maximo de centena de milhar
JEQ %verifica_dezena_de_milhar # Se for igual, vai para o label verifica_dezena_de_milhar
JMP %le_key # Se não for igual, volta para o label le_key

verifica_dezena_de_milhar:
LDA @4 # Carrega o acumulador com o endereço de dezena de milhar
CEQ @14 # Compara o valor do acumulador com o valor maximo de dezena de milhar
JEQ %verifica_milhar # Se for igual, vai para o label verifica_milhar
JMP %le_key # Se não for igual, volta para o label le_key

verifica_milhar:
LDA @3 # Carrega o acumulador com o endereço de milhar
CEQ @13 # Compara o valor do acumulador com o valor maximo de milhar
JEQ %verifica_centena # Se for igual, vai para o label verifica_centena
JMP %le_key # Se não for igual, volta para o label le_key

verifica_centena:
LDA @2 # Carrega o acumulador com o endereço de centena
CEQ @12 # Compara o valor do acumulador com o valor maximo de centena
JEQ %verifica_dezena # Se for igual, vai para o label verifica_dezena
JMP %le_key # Se não for igual, volta para o label le_key

verifica_dezena:
LDA @1 # Carrega o acumulador com o endereço de dezena
CEQ @11 # Compara o valor do acumulador com o valor maximo de dezena
JEQ %verifica_unidade # Se for igual, vai para o label verifica_unidade
JMP %le_key # Se não for igual, volta para o label le_key

verifica_unidade:
LDA @0 # Carrega o acumulador com o endereço de unidade
CEQ @10 # Compara o valor do acumulador com o valor maximo de unidade
JEQ %final # Se for igual, vai para o label final
JMP %le_key # Se não for igual, volta para o label le_key




final:
NOP
LDA @51 # Carrega 1 no acumulador
STA @258 # Liga led 9
STA @257 # Liga o led 8
LDI $255 # Carrega 255 no acumulador
STA @256 # Liga o led 7 ao led 0
JMP %final
